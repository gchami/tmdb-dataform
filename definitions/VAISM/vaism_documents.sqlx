config {
  type: "table",
  schema: dataform.projectConfig.vars.TARGET_DATA,
  description: "Vertex AI Search for Media (VAIS:M) Documents",
  dependOnDependencyAssertions: true,
  assertions: {
    uniqueKey: ["id"]
  },
  tags: ["VAISM"]
}


SELECT
    document_id AS id
  , 'default_schema' AS schemaId
  , parent_document_id AS parentDocumentId
    -- Remove any known properties that could result in NULL values and potentially fail the import
  , REGEXP_REPLACE(TO_JSON_STRING((SELECT AS STRUCT dt.* EXCEPT (document_id, parent_document_id)))
                 , r'([""]+(\w*)[""]:null,*)', '') AS jsonData
FROM (SELECT
          -- minimum 4 digit id required for data import
          FORMAT('%04d', movie.id) AS document_id
        , CAST(NULL AS STRING) AS parent_document_id
        , movie.title
        , movie.overview AS description
        , 'en-US' AS language_code
        , ARRAY_CONCAT(IF(ARRAY_LENGTH(movie_genre.categories) > 0, movie_genre.categories, ['Unknown'])) AS categories
        , "https://www.themoviedb.org/movie/" || movie.id AS uri
        , ARRAY_CONCAT(IF(movie.poster_image IS NOT NULL, [STRUCT('Poster Art' AS name, movie.poster_image AS uri)], [])
                     , IF(movie.backdrop_image IS NOT NULL, [STRUCT('Backdrop Art' AS name, movie.backdrop_image AS uri)], [])) AS images
        , 'movie' AS media_type
        , ARRAY_CONCAT(IF(ARRAY_LENGTH(movie_language.in_languages) > 0, movie_language.in_languages, [])) AS in_languages
        , IF(ARRAY_LENGTH(movie.origin_country) > 0, movie.origin_country[OFFSET(0)], NULL) AS country_of_origin
        , 1 AS content_index
        , ARRAY_CONCAT(ARRAY<STRING>[]) AS filter_tags
        , IF(movie.runtime > 0, FORMAT('%dm', movie.runtime), NULL) AS duration
        , EXTRACT(YEAR FROM movie.release_date) AS production_year
        , ARRAY_CONCAT(ARRAY<STRING>[]) AS content_rating
        , FORMAT_TIMESTAMP('%Y-%m-%dT%H:%M:%SZ', CAST(COALESCE(movie.release_date, DATE '9999-12-31') AS TIMESTAMP)) AS availability_start_time
        , ARRAY_CONCAT([STRUCT("tmdb" AS rating_source
                               -- Formula to change the rating scale from 1-10 (TMDB) to 1-5 (VAISM)
                               -- (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin
                             , (((movie.vote_average - 0) * (5 - 1)) / (10 - 0)) + 1 AS rating_score
                             , movie.vote_count AS rating_count)]) AS aggregate_ratings
        , ARRAY_CONCAT(IF(movie_actor.persons IS NOT NULL, movie_actor.persons, [])
                     , IF(movie_character.persons IS NOT NULL, movie_character.persons, [])) AS persons
        , ARRAY_CONCAT(ARRAY<STRING>[]) AS hash_tags
      FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "tmdb_movie" }) } AS movie
        LEFT OUTER JOIN (SELECT
                             id
                           , ARRAY_AGG(name ORDER BY pos) AS categories
                         FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "tmdb_movie_genre" }) }
                         GROUP BY 1) AS movie_genre
          ON  movie.id = movie_genre.id
        LEFT OUTER JOIN (SELECT
                             id
                           , ARRAY_AGG(STRUCT("actor" AS role, name, pos AS rank) ORDER BY pos ASC) AS persons
                         FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "tmdb_movie_cast" }) }
                         WHERE LENGTH(TRIM(name)) > 0
                         GROUP BY 1) AS movie_actor
          ON  movie.id = movie_actor.id
        LEFT OUTER JOIN (SELECT
                             id
                           , ARRAY_AGG(STRUCT("character" AS role, character AS name, pos AS rank) ORDER BY pos ASC) AS persons
                         FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "tmdb_movie_cast" }) }
                         WHERE LENGTH(TRIM(character)) > 0
                         GROUP BY 1) AS movie_character
          ON  movie.id = movie_character.id
        LEFT OUTER JOIN (SELECT
                             id
                           , ARRAY_AGG(CASE WHEN iso_639_1 = 'cn' THEN 'cmn'
                                            ELSE iso_639_1
                                       END
                                       ORDER BY pos ASC) AS in_languages
                         FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "tmdb_movie_spoken_language" }) }
                         GROUP BY 1) AS movie_language
          ON  movie.id = movie_language.id
     ) AS dt
